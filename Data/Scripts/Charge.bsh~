double heightModifier = coefficients[0];
double chargeMofidier = coefficients[1];

// only if there is a beneficial height difference
if(heightModifier > 1){
	logger.info(actor.getName() + " is charging!");
	RPGMain.printText(true, actor.getName() + " is charging!");

	int[][] path;
	int[] oldPos = new int[2];
	oldPos[0] = actorPos[0];
	oldPos[1] = actorPos[1];

	int sum = (int)(Math.abs(targetPos[0] - actorPos[0]) + Math.abs(targetPos[1] - actorPos[1]));
	
	int[] newPos = new int[2];
	newPos[0] = targetPos[0] + (int)(13.0*(double)(actorPos[0] - targetPos[0])/sum);
	newPos[1] = targetPos[1] + (int)(13.0*(double)(actorPos[1] - targetPos[1])/sum);

	logger.debug("actorPos: " + actorPos[0] + "," + actorPos[1] + "\n newPos: " + newPos[0] + "," + newPos[1]);
	path = Global.calculatePath(oldPos, newPos, (int)(actor.getMovement()*battlefield.getWidth()/battlefield.sizeInMeter), covers,true).toArray(new int[][]{});
	logger.debug("Class name:" + actor.getClass().getName());
	for(int j=0;j<path.length;j++){
		if(actor.getClass().getName().equalsIgnoreCase("game.Avatar")){
			dungeonMap.updateBattlefield(path[j]);
		}
		else{
			dungeonMap.updateBattlefield(covers,targetPos,path[j],mobIndex);
		}
		try{
			Thread.sleep(1000/25);
		} catch(InterruptedException exc){
		}
	}
	actorPos[0] = newPos[0];
	actorPos[1] = newPos[1];
	
	// chargemodifier acts as another parameter to increase damage
	// the effect of a charge is larger than just tactical height
	chargeModifier = 1.3*heightModifier;
	coefficients[1] = chargeModifier;
	// coordinates are changed, so enemy and player are now in melee distance, can be handled by this function in the 'hit' segment
	hitAbility.activate(actor,target,actorPos,targetPos,actionTarget,covers,coefficients);
	coefficients[1] = 1;
	return true;
}
else if(actor.getClass().getName().equalsIgnoreCase("game.Avatar")){
	RPGMain.printText(true, "You must be on high ground to do a charge.");
	return false;
}
return false;
